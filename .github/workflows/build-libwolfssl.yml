name: Cross-compile wolfSSL for ImmortalWrt 24.10.1 x64

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      wolfssl_version:
        description: 'wolfSSL version to build'
        required: true
        default: 'v5.8.0-stable'
        type: string

env:
  WOLFSSL_VERSION: ${{ inputs.wolfssl_version || 'v5.8.0-stable' }}

jobs:
  cross-compile-x64:
    name: Cross-compile wolfSSL for x64
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          autoconf \
          automake \
          libtool \
          pkg-config \
          wget \
          curl \
          git \
          file \
          unzip \
          zstd \
          xz-utils

    - name: Download wolfSSL source
      run: |
        git clone --depth 1 --branch ${WOLFSSL_VERSION} https://github.com/wolfSSL/wolfssl.git
        cd wolfssl
        ./autogen.sh

    - name: Download ImmortalWrt 24.10.1 x64 SDK
      run: |
        # 使用确认的ImmortalWrt 24.10.1 x86/64 SDK下载地址
        SDK_URL="https://downloads.immortalwrt.org/releases/24.10.1/targets/x86/64/immortalwrt-sdk-24.10.1-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
        
        echo "Downloading SDK from: $SDK_URL"
        wget -O sdk.tar.zst "$SDK_URL"
        
        # 验证下载的文件
        echo "Downloaded file size: $(stat -c%s sdk.tar.zst) bytes"
        file sdk.tar.zst
        
        # 解压SDK
        echo "Extracting SDK..."
        tar -I zstd -xf sdk.tar.zst
        
        # 查找SDK目录
        SDK_DIR=$(find . -maxdepth 1 -name "immortalwrt-sdk-*" -type d)
        if [ -z "$SDK_DIR" ]; then
          echo "Error: SDK directory not found"
          ls -la
          exit 1
        fi
        
        echo "SDK_PATH=$(pwd)/$SDK_DIR" >> $GITHUB_ENV
        echo "Found SDK directory: $SDK_DIR"
        
        # 验证SDK目录结构
        ls -la "$SDK_DIR/"
        ls -la "$SDK_DIR/staging_dir/"

    - name: Setup SDK environment and verify toolchain
      run: |
        cd $SDK_PATH
        
        # 查找正确的工具链目录
        TOOLCHAIN_DIR=$(find staging_dir -maxdepth 1 -name "toolchain-*" -type d)
        if [ -z "$TOOLCHAIN_DIR" ]; then
          echo "Error: Toolchain directory not found"
          ls -la staging_dir/
          exit 1
        fi
        
        echo "Found toolchain directory: $TOOLCHAIN_DIR"
        TOOLCHAIN_PATH="$SDK_PATH/$TOOLCHAIN_DIR"
        
        # 设置环境变量
        echo "STAGING_DIR=$SDK_PATH/staging_dir" >> $GITHUB_ENV
        echo "TOOLCHAIN_PATH=$TOOLCHAIN_PATH" >> $GITHUB_ENV
        echo "PATH=$TOOLCHAIN_PATH/bin:$PATH" >> $GITHUB_ENV
        
        # 设置交叉编译工具链变量
        echo "CC=x86_64-openwrt-linux-musl-gcc" >> $GITHUB_ENV
        echo "CXX=x86_64-openwrt-linux-musl-g++" >> $GITHUB_ENV
        echo "AR=x86_64-openwrt-linux-musl-ar" >> $GITHUB_ENV
        echo "RANLIB=x86_64-openwrt-linux-musl-ranlib" >> $GITHUB_ENV
        echo "STRIP=x86_64-openwrt-linux-musl-strip" >> $GITHUB_ENV
        echo "LD=x86_64-openwrt-linux-musl-ld" >> $GITHUB_ENV
        echo "CROSS_COMPILE=x86_64-openwrt-linux-musl-" >> $GITHUB_ENV
        
        # 验证工具链
        echo "Verifying toolchain..."
        ls -la "$TOOLCHAIN_PATH/bin/"
        
        # 测试编译器
        export PATH="$TOOLCHAIN_PATH/bin:$PATH"
        x86_64-openwrt-linux-musl-gcc --version
        echo "Toolchain verification completed successfully"

    - name: Configure wolfSSL build
      working-directory: wolfssl
      run: |
        export PATH="$TOOLCHAIN_PATH/bin:$PATH"
        export STAGING_DIR="$SDK_PATH/staging_dir"
        
        # 设置ImmortalWrt特定的编译标志
        CFLAGS="-Os -pipe -fno-caller-saves -fno-plt -fhonour-copts -Wno-error=unused-but-set-variable -Wno-error=unused-result -fstack-protector -D_FORTIFY_SOURCE=1"
        CXXFLAGS="$CFLAGS"
        LDFLAGS="-fstack-protector"
        
        # 配置wolfSSL，移除可能导致问题的选项
        ./configure \
          --host=x86_64-openwrt-linux-musl \
          --target=x86_64-openwrt-linux-musl \
          --build=x86_64-pc-linux-gnu \
          --prefix=/usr \
          --exec-prefix=/usr \
          --bindir=/usr/bin \
          --sbindir=/usr/sbin \
          --libexecdir=/usr/lib \
          --sysconfdir=/etc \
          --datadir=/usr/share \
          --localstatedir=/var \
          --mandir=/usr/man \
          --infodir=/usr/info \
          --disable-shared \
          --enable-static \
          --enable-singlethreaded \
          --enable-opensslextra \
          --enable-opensslall \
          --enable-secure-renegotiation \
          --enable-supportedcurves \
          --enable-fortress \
          --enable-fastmath \
          --enable-ecc \
          --enable-aesgcm \
          --enable-chacha \
          --enable-poly1305 \
          --enable-sha3 \
          --enable-curve25519 \
          --enable-ed25519 \
          --enable-keygen \
          --enable-certgen \
          --enable-certreq \
          --enable-certext \
          --enable-sessioncerts \
          --enable-sni \
          --enable-alpn \
          --disable-examples \
          --disable-crypttests \
          --disable-oldtls \
          --disable-shared \
          CC=x86_64-openwrt-linux-musl-gcc \
          CXX=x86_64-openwrt-linux-musl-g++ \
          AR=x86_64-openwrt-linux-musl-ar \
          RANLIB=x86_64-openwrt-linux-musl-ranlib \
          STRIP=x86_64-openwrt-linux-musl-strip \
          CFLAGS="$CFLAGS" \
          CXXFLAGS="$CXXFLAGS" \
          LDFLAGS="$LDFLAGS"

    - name: Build wolfSSL
      working-directory: wolfssl
      run: |
        export PATH="$TOOLCHAIN_PATH/bin:$PATH"
        export STAGING_DIR="$SDK_PATH/staging_dir"
        
        echo "Starting wolfSSL build..."
        make -j$(nproc) V=s
        
        echo "Installing wolfSSL..."
        make DESTDIR=$PWD/install install
        
        # 验证构建结果
        echo "Build completed. Checking installed files:"
        find install -name "libwolfssl*" -exec ls -la {} \;

    - name: Create deployment package
      working-directory: wolfssl
      run: |
        export PATH="$TOOLCHAIN_PATH/bin:$PATH"
        
        # 创建包目录结构
        mkdir -p package/usr/lib
        mkdir -p package/usr/include
        mkdir -p package/usr/bin
        
        # 复制库文件和头文件
        if [ -d "install/usr/lib" ]; then
          cp -av install/usr/lib/* package/usr/lib/ 2>/dev/null || true
        fi
        if [ -d "install/usr/include" ]; then
          cp -av install/usr/include/* package/usr/include/ 2>/dev/null || true
        fi
        if [ -d "install/usr/bin" ]; then
          cp -av install/usr/bin/* package/usr/bin/ 2>/dev/null || true
        fi
        
        # 去除调试信息以减小体积
        find package -name "*.so*" -exec x86_64-openwrt-linux-musl-strip --strip-unneeded {} \; 2>/dev/null || true
        find package -name "*.a" -exec x86_64-openwrt-linux-musl-strip --strip-debug {} \; 2>/dev/null || true
        find package -type f -executable -exec x86_64-openwrt-linux-musl-strip --strip-all {} \; 2>/dev/null || true
        
        # 创建安装脚本
        mkdir -p scripts
        cat > scripts/install.sh << 'EOF'
        #!/bin/sh
        echo "Installing wolfSSL for ImmortalWrt 24.10.1..."
        
        # 备份现有库
        if [ -f /usr/lib/libwolfssl.so ]; then
            cp /usr/lib/libwolfssl.so /usr/lib/libwolfssl.so.backup 2>/dev/null || true
            echo "Existing library backed up"
        fi
        
        # 复制新库文件
        cp -r usr/* /usr/
        
        # 更新动态链接库缓存
        ldconfig 2>/dev/null || true
        
        # 重启strongswan服务（如果存在）
        if [ -f /etc/init.d/strongswan ]; then
            echo "Restarting strongswan service..."
            /etc/init.d/strongswan restart 2>/dev/null || true
        fi
        
        echo "wolfSSL installation completed successfully"
        EOF
        
        chmod +x scripts/install.sh
        
        # 创建最终的tarball包
        tar -czf wolfssl-${WOLFSSL_VERSION}-immortalwrt-24.10.1-x86_64.tar.gz -C package .
        
        # 创建包含安装脚本的完整包
        mkdir -p full-package
        cp -r package/* full-package/
        cp scripts/install.sh full-package/
        tar -czf wolfssl-${WOLFSSL_VERSION}-immortalwrt-24.10.1-x86_64-with-installer.tar.gz -C full-package .
        
        # 显示包信息
        echo "=== Package Contents ==="
        find package -type f | head -20
        echo "=== Package Sizes ==="
        ls -lah wolfssl-${WOLFSSL_VERSION}-immortalwrt-24.10.1-x86_64*.tar.gz

    - name: Test compiled libraries
      working-directory: wolfssl
      run: |
        export PATH="$TOOLCHAIN_PATH/bin:$PATH"
        
        echo "=== Testing library symbols ==="
        # 检查关键符号是否存在
        if [ -f "package/usr/lib/libwolfssl.a" ]; then
          echo "Checking symbols in static library..."
          x86_64-openwrt-linux-musl-nm package/usr/lib/libwolfssl.a | grep -E "(wolfssl_ec_diffie_hellman|wolfSSL_Init|wolfSSL_CTX_new)" || echo "Some symbols might be in different format"
        fi
        
        if [ -f "package/usr/lib/libwolfssl.so" ]; then
          echo "Checking shared library..."
          file package/usr/lib/libwolfssl.so
          x86_64-openwrt-linux-musl-readelf -d package/usr/lib/libwolfssl.so 2>/dev/null || true
        fi
        
        echo "Library testing completed"

    - name: Generate build report
      working-directory: wolfssl
      run: |
        echo "# wolfSSL ${WOLFSSL_VERSION} 构建报告 - ImmortalWrt 24.10.1 x64" > build-report.md
        echo "" >> build-report.md
        echo "## 构建信息" >> build-report.md
        echo "- wolfSSL版本: ${WOLFSSL_VERSION}" >> build-report.md
        echo "- 目标系统: ImmortalWrt 24.10.1" >> build-report.md
        echo "- 目标架构: x86_64" >> build-report.md
        echo "- 编译器: GCC 13.3.0 with musl libc" >> build-report.md
        echo "- 构建日期: $(date)" >> build-report.md
        echo "- 构建主机: $(uname -a)" >> build-report.md
        echo "" >> build-report.md
        echo "## 启用的功能特性" >> build-report.md
        echo "- ✅ OpenSSL兼容层 (opensslextra, opensslall)" >> build-report.md
        echo "- ✅ 现代加密算法 (ECC, AES-GCM, ChaCha20, Poly1305)" >> build-report.md
        echo "- ✅ TLS 1.3和高级特性 (Curve25519, Ed25519, SHA-3)" >> build-report.md
        echo "- ✅ 证书功能 (证书生成、密钥生成、证书请求)" >> build-report.md
        echo "- ✅ 会话管理 (SNI, ALPN, 会话证书)" >> build-report.md
        echo "- ✅ 安全加固 (安全重协商、支持的曲线)" >> build-report.md
        echo "- ✅ 单线程模式 (适合嵌入式环境)" >> build-report.md
        echo "" >> build-report.md
        echo "## 快速安装" >> build-report.md
        echo "### 方法1：自动安装脚本" >> build-report.md
        echo "1. 下载 \`wolfssl-${WOLFSSL_VERSION}-immortalwrt-24.10.1-x86_64-with-installer.tar.gz\`" >> build-report.md
        echo "2. 在ImmortalWrt系统中执行:" >> build-report.md
        echo "   \`\`\`bash" >> build-report.md
        echo "   tar -xzf wolfssl-*-with-installer.tar.gz" >> build-report.md
        echo "   chmod +x install.sh" >> build-report.md
        echo "   ./install.sh" >> build-report.md
        echo "   \`\`\`" >> build-report.md
        echo "" >> build-report.md
        echo "### 方法2：手动安装" >> build-report.md
        echo "1. 下载 \`wolfssl-${WOLFSSL_VERSION}-immortalwrt-24.10.1-x86_64.tar.gz\`" >> build-report.md
        echo "2. 在ImmortalWrt系统中执行:" >> build-report.md
        echo "   \`\`\`bash" >> build-report.md
        echo "   tar -xzf wolfssl-${WOLFSSL_VERSION}-immortalwrt-24.10.1-x86_64.tar.gz -C /" >> build-report.md
        echo "   ldconfig" >> build-report.md
        echo "   /etc/init.d/strongswan restart" >> build-report.md
        echo "   \`\`\`" >> build-report.md
        echo "" >> build-report.md
        echo "## 问题修复" >> build-report.md
        echo "此版本专门解决以下strongswan错误:" >> build-report.md
        echo "\`\`\`" >> build-report.md
        echo "plugin 'wolfssl' failed to load: Error relocating" >> build-report.md
        echo "/usr/lib/ipsec/plugins/libstrongswan-wolfssl.so:" >> build-report.md
        echo "wolfssl_ec_diffie_hellman_create: symbol not found" >> build-report.md
        echo "\`\`\`" >> build-report.md
        echo "" >> build-report.md
        echo "## 故障排除" >> build-report.md
        echo "如果安装后仍有问题，请检查:" >> build-report.md
        echo "1. 验证库文件: \`ls -la /usr/lib/libwolfssl*\`" >> build-report.md
        echo "2. 检查符号: \`nm /usr/lib/libwolfssl.a | grep wolfssl_ec\`" >> build-report.md
        echo "3. 查看日志: \`logread | grep strongswan\`" >> build-report.md
        echo "4. 重启服务: \`/etc/init.d/strongswan restart\`" >> build-report.md

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wolfssl-immortalwrt-24.10.1-x86_64-${{ env.WOLFSSL_VERSION }}
        path: |
          wolfssl/wolfssl-${{ env.WOLFSSL_VERSION }}-immortalwrt-24.10.1-x86_64.tar.gz
          wolfssl/wolfssl-${{ env.WOLFSSL_VERSION }}-immortalwrt-24.10.1-x86_64-with-installer.tar.gz
          wolfssl/build-report.md
        retention-days: 30

    - name: Create release assets (if release)
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          wolfssl/wolfssl-${{ env.WOLFSSL_VERSION }}-immortalwrt-24.10.1-x86_64.tar.gz
          wolfssl/wolfssl-${{ env.WOLFSSL_VERSION }}-immortalwrt-24.10.1-x86_64-with-installer.tar.gz
          wolfssl/build-report.md
        body: |
          ## 🚀 wolfSSL ${{ env.WOLFSSL_VERSION }} for ImmortalWrt 24.10.1 x64
          
          **专为ImmortalWrt 24.10.1 x86_64架构优化编译的wolfSSL库，彻底解决strongswan插件符号缺失问题。**
          
          ### ✅ 主要修复
          - 🔧 修复了 `wolfssl_ec_diffie_hellman_create` 符号缺失问题
          - 🛠️ 使用正确的ImmortalWrt 24.10.1官方SDK和GCC 13.3.0工具链
          - ⚡ 优化了构建配置，移除不兼容选项
          - 🔒 启用单线程模式，提高嵌入式系统稳定性
          
          ### 📦 下载选项
          - **推荐**: `wolfssl-${{ env.WOLFSSL_VERSION }}-immortalwrt-24.10.1-x86_64-with-installer.tar.gz` (包含自动安装脚本)
          - **手动**: `wolfssl-${{ env.WOLFSSL_VERSION }}-immortalwrt-24.10.1-x86_64.tar.gz` (仅库文件)
          
          ### 🚀 快速安装
          ```
          # 下载带安装脚本的版本
          wget wolfssl-${{ env.WOLFSSL_VERSION }}-immortalwrt-24.10.1-x86_64-with-installer.tar.gz
          tar -xzf wolfssl-*-with-installer.tar.gz
          chmod +x install.sh && ./install.sh
          ```
          
          ### 💡 功能特性
          - 完整OpenSSL兼容层，无缝替换现有wolfSSL
          - 支持所有现代加密算法和TLS 1.3
          - 针对ImmortalWrt 24.10.1优化的编译参数
          - 包含strongswan所需的所有符号和函数
          
          ### ❓ 支持
          遇到问题请查看包含的 `build-report.md` 获取详细安装说明和故障排除指南。
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
