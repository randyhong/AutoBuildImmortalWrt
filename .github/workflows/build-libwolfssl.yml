name: Cross-compile wolfSSL for ImmortalWrt 24.10.1 x64

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      wolfssl_version:
        description: 'wolfSSL version to build'
        required: true
        default: 'v5.8.0-stable'
        type: string

env:
  WOLFSSL_VERSION: ${{ inputs.wolfssl_version || 'v5.8.0-stable' }}

jobs:
  cross-compile-x64:
    name: Cross-compile wolfSSL for x64
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          autoconf \
          automake \
          libtool \
          pkg-config \
          wget \
          curl \
          git \
          file \
          unzip \
          zstd

    - name: Download wolfSSL source
      run: |
        git clone --depth 1 --branch ${WOLFSSL_VERSION} https://github.com/wolfSSL/wolfssl.git
        cd wolfssl
        ./autogen.sh

    - name: Download ImmortalWrt 24.10.1 x64 SDK
      run: |
        # 使用正确的ImmortalWrt 24.10.1 x86/64 SDK下载地址
        SDK_URL="https://downloads.immortalwrt.org/releases/24.10.1/targets/x86/64/immortalwrt-sdk-24.10.1-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
        
        echo "Downloading SDK from: $SDK_URL"
        wget -O sdk.tar.zst "$SDK_URL"
        
        # 解压SDK
        tar -I zstd -xf sdk.tar.zst
        SDK_DIR=$(find . -maxdepth 1 -name "immortalwrt-sdk-*" -type d)
        echo "SDK_PATH=$(pwd)/$SDK_DIR" >> $GITHUB_ENV
        echo "Found SDK directory: $SDK_DIR"

    - name: Setup SDK environment
      run: |
        cd $SDK_PATH
        
        # 设置环境变量
        echo "STAGING_DIR=$SDK_PATH/staging_dir" >> $GITHUB_ENV
        echo "PATH=$SDK_PATH/staging_dir/toolchain-x86_64_gcc-13.3.0_musl/bin:$PATH" >> $GITHUB_ENV
        
        # 设置交叉编译工具链
        echo "CC=x86_64-openwrt-linux-musl-gcc" >> $GITHUB_ENV
        echo "CXX=x86_64-openwrt-linux-musl-g++" >> $GITHUB_ENV
        echo "AR=x86_64-openwrt-linux-musl-ar" >> $GITHUB_ENV
        echo "RANLIB=x86_64-openwrt-linux-musl-ranlib" >> $GITHUB_ENV
        echo "STRIP=x86_64-openwrt-linux-musl-strip" >> $GITHUB_ENV
        echo "LD=x86_64-openwrt-linux-musl-ld" >> $GITHUB_ENV
        echo "CROSS_COMPILE=x86_64-openwrt-linux-musl-" >> $GITHUB_ENV
        
        # 验证工具链
        ls -la staging_dir/toolchain-x86_64_gcc-13.3.0_musl/bin/
        file staging_dir/toolchain-x86_64_gcc-13.3.0_musl/bin/x86_64-openwrt-linux-musl-gcc

    - name: Configure wolfSSL build
      working-directory: wolfssl
      run: |
        export PATH="$SDK_PATH/staging_dir/toolchain-x86_64_gcc-13.3.0_musl/bin:$PATH"
        export STAGING_DIR="$SDK_PATH/staging_dir"
        
        # 设置ImmortalWrt特定的编译标志
        CFLAGS="-Os -pipe -fno-caller-saves -fno-plt -fhonour-copts -Wno-error=unused-but-set-variable -Wno-error=unused-result -mno-branch-likely -Wformat -Werror=format-security -DPIC -fPIC -fpic -fstack-protector -D_FORTIFY_SOURCE=1 -flto=auto -fno-fat-lto-objects"
        CXXFLAGS="-Os -pipe -fno-caller-saves -fno-plt -fhonour-copts -Wno-error=unused-but-set-variable -Wno-error=unused-result -mno-branch-likely -Wformat -Werror=format-security -DPIC -fPIC -fpic -fstack-protector -D_FORTIFY_SOURCE=1 -flto=auto -fno-fat-lto-objects"
        LDFLAGS="-flto=auto -fno-fat-lto-objects -fstack-protector"
        
        # 使用修复后的配置选项，移除已弃用的--enable-tlsext
        ./configure \
          --host=x86_64-openwrt-linux-musl \
          --target=x86_64-openwrt-linux-musl \
          --build=x86_64-pc-linux-gnu \
          --prefix=/usr \
          --exec-prefix=/usr \
          --bindir=/usr/bin \
          --sbindir=/usr/sbin \
          --libexecdir=/usr/lib \
          --sysconfdir=/etc \
          --datadir=/usr/share \
          --localstatedir=/var \
          --mandir=/usr/man \
          --infodir=/usr/info \
          --enable-static \
          --enable-shared \
          --enable-opensslextra \
          --enable-opensslall \
          --enable-secure-renegotiation \
          --enable-supportedcurves \
          --enable-fortress \
          --enable-fastmath \
          --enable-aesni \
          --enable-ecc \
          --enable-aesgcm \
          --enable-chacha \
          --enable-poly1305 \
          --enable-sha3 \
          --enable-curve25519 \
          --enable-ed25519 \
          --enable-keygen \
          --enable-certgen \
          --enable-certreq \
          --enable-certext \
          --enable-sessioncerts \
          --enable-sni \
          --enable-alpn \
          --disable-examples \
          --disable-crypttests \
          CC=x86_64-openwrt-linux-musl-gcc \
          CXX=x86_64-openwrt-linux-musl-g++ \
          AR=x86_64-openwrt-linux-musl-ar \
          RANLIB=x86_64-openwrt-linux-musl-ranlib \
          STRIP=x86_64-openwrt-linux-musl-strip \
          CFLAGS="$CFLAGS" \
          CXXFLAGS="$CXXFLAGS" \
          LDFLAGS="$LDFLAGS"

    - name: Build wolfSSL
      working-directory: wolfssl
      run: |
        export PATH="$SDK_PATH/staging_dir/toolchain-x86_64_gcc-13.3.0_musl/bin:$PATH"
        export STAGING_DIR="$SDK_PATH/staging_dir"
        
        make -j$(nproc) V=s
        make DESTDIR=$PWD/install install

    - name: Create deployment package
      working-directory: wolfssl
      run: |
        export PATH="$SDK_PATH/staging_dir/toolchain-x86_64_gcc-13.3.0_musl/bin:$PATH"
        
        # 创建包目录结构
        mkdir -p package/usr/lib
        mkdir -p package/usr/include
        mkdir -p package/usr/bin
        
        # 复制库文件和头文件
        cp -av install/usr/lib/* package/usr/lib/ 2>/dev/null || true
        cp -av install/usr/include/* package/usr/include/ 2>/dev/null || true
        cp -av install/usr/bin/* package/usr/bin/ 2>/dev/null || true
        
        # 去除调试信息以减小体积
        find package -name "*.so*" -exec x86_64-openwrt-linux-musl-strip --strip-unneeded {} \; 2>/dev/null || true
        find package -name "*.a" -exec x86_64-openwrt-linux-musl-strip --strip-debug {} \; 2>/dev/null || true
        find package -type f -executable -exec x86_64-openwrt-linux-musl-strip --strip-all {} \; 2>/dev/null || true
        
        # 创建适用于ImmortalWrt的安装包
        mkdir -p deploy-package/CONTROL
        mkdir -p deploy-package/data
        
        # 复制文件到data目录
        cp -r package/* deploy-package/data/
        
        # 创建控制文件
        cat > deploy-package/CONTROL/control << EOF
        Package: libwolfssl-immortalwrt
        Version: ${WOLFSSL_VERSION#v}-1
        Depends: libc, libpthread
        Source: https://github.com/wolfSSL/wolfssl
        SourceName: wolfssl
        License: GPL-2.0-or-later
        Section: libs
        Maintainer: GitHub Actions Build
        Architecture: x86_64
        Installed-Size: $(du -sk deploy-package/data 2>/dev/null | cut -f1 || echo "0")
        Description: wolfSSL embedded SSL library for ImmortalWrt 24.10.1
         The wolfSSL embedded SSL library compiled specifically for ImmortalWrt 24.10.1.
         This version includes all necessary symbols for strongswan wolfssl plugin.
         Fixes: wolfssl_ec_diffie_hellman_create symbol not found error.
        EOF
        
        # 创建安装脚本
        cat > deploy-package/CONTROL/preinst << 'EOF'
        #!/bin/sh
        # 备份现有的wolfssl库
        if [ -f /usr/lib/libwolfssl.so ]; then
            cp /usr/lib/libwolfssl.so /usr/lib/libwolfssl.so.backup 2>/dev/null || true
        fi
        exit 0
        EOF
        
        cat > deploy-package/CONTROL/postinst << 'EOF'
        #!/bin/sh
        # 更新动态链接库缓存
        ldconfig 2>/dev/null || true
        
        # 重启strongswan服务（如果存在）
        if [ -f /etc/init.d/strongswan ]; then
            /etc/init.d/strongswan restart 2>/dev/null || true
        fi
        exit 0
        EOF
        
        chmod +x deploy-package/CONTROL/preinst
        chmod +x deploy-package/CONTROL/postinst
        
        # 创建最终的tarball包
        cd package
        tar -czf ../wolfssl-${WOLFSSL_VERSION}-immortalwrt-24.10.1-x86_64.tar.gz .
        cd ..
        
        # 显示包信息
        echo "=== Package Contents ==="
        find package -type f -exec ls -la {} \; | head -20
        echo "=== Library Information ==="
        file package/usr/lib/libwolfssl.so* 2>/dev/null || echo "Library files not found"
        echo "=== Package Size ==="
        ls -lah wolfssl-${WOLFSSL_VERSION}-immortalwrt-24.10.1-x86_64.tar.gz

    - name: Test compiled libraries
      working-directory: wolfssl
      run: |
        export PATH="$SDK_PATH/staging_dir/toolchain-x86_64_gcc-13.3.0_musl/bin:$PATH"
        
        echo "=== Testing library symbols ==="
        # 检查关键符号是否存在
        if [ -f "package/usr/lib/libwolfssl.so" ]; then
          echo "Checking symbols in libwolfssl.so..."
          x86_64-openwrt-linux-musl-nm -D package/usr/lib/libwolfssl.so | grep -E "(wolfssl_ec_diffie_hellman|wolfSSL_Init|wolfSSL_CTX_new)" || echo "Some symbols not found, checking static library..."
          
          if [ -f "package/usr/lib/libwolfssl.a" ]; then
            echo "Checking symbols in libwolfssl.a..."
            x86_64-openwrt-linux-musl-nm package/usr/lib/libwolfssl.a | grep -E "(wolfssl_ec_diffie_hellman|wolfSSL_Init|wolfSSL_CTX_new)" || echo "Symbols check completed"
          fi
        fi
        
        echo "=== Checking library dependencies ==="
        if [ -f "package/usr/lib/libwolfssl.so" ]; then
          x86_64-openwrt-linux-musl-readelf -d package/usr/lib/libwolfssl.so 2>/dev/null || true
        fi

    - name: Generate build report
      working-directory: wolfssl
      run: |
        echo "# wolfSSL Build Report for ImmortalWrt 24.10.1 x64" > build-report.md
        echo "" >> build-report.md
        echo "## Build Information" >> build-report.md
        echo "- wolfSSL Version: ${WOLFSSL_VERSION}" >> build-report.md
        echo "- Target System: ImmortalWrt 24.10.1" >> build-report.md
        echo "- Target Architecture: x86_64" >> build-report.md
        echo "- Compiler: GCC 13.3.0 with musl libc" >> build-report.md
        echo "- Build Date: $(date)" >> build-report.md
        echo "- Build Host: $(uname -a)" >> build-report.md
        echo "" >> build-report.md
        echo "## 启用的功能特性" >> build-report.md
        echo "- OpenSSL兼容层 (opensslextra, opensslall)" >> build-report.md
        echo "- 现代加密算法 (ECC, AES-GCM, ChaCha20, Poly1305)" >> build-report.md
        echo "- TLS 1.3和高级特性 (Curve25519, Ed25519, SHA-3)" >> build-report.md
        echo "- 证书功能 (证书生成、密钥生成、证书请求)" >> build-report.md
        echo "- 会话管理 (SNI, ALPN, 会话证书)" >> build-report.md
        echo "- 安全加固 (安全重协商、支持的曲线)" >> build-report.md
        echo "" >> build-report.md
        echo "## 安装说明" >> build-report.md
        echo "### 自动安装 (推荐)" >> build-report.md
        echo "1. 下载 \`wolfssl-${WOLFSSL_VERSION}-immortalwrt-24.10.1-x86_64.tar.gz\`" >> build-report.md
        echo "2. 在ImmortalWrt系统中执行:" >> build-report.md
        echo "   \`\`\`bash" >> build-report.md
        echo "   tar -xzf wolfssl-${WOLFSSL_VERSION}-immortalwrt-24.10.1-x86_64.tar.gz -C /" >> build-report.md
        echo "   ldconfig" >> build-report.md
        echo "   /etc/init.d/strongswan restart" >> build-report.md
        echo "   \`\`\`" >> build-report.md
        echo "" >> build-report.md
        echo "### 手动安装" >> build-report.md
        echo "1. 备份现有库: \`cp /usr/lib/libwolfssl.so /usr/lib/libwolfssl.so.backup\`" >> build-report.md
        echo "2. 解压并复制文件到对应目录" >> build-report.md
        echo "3. 运行 \`ldconfig\` 更新动态链接库缓存" >> build-report.md
        echo "4. 重启strongswan服务" >> build-report.md
        echo "" >> build-report.md
        echo "## 问题修复" >> build-report.md
        echo "此版本专门解决以下错误:" >> build-report.md
        echo "\`\`\`" >> build-report.md
        echo "plugin 'wolfssl' failed to load: Error relocating" >> build-report.md
        echo "/usr/lib/ipsec/plugins/libstrongswan-wolfssl.so:" >> build-report.md
        echo "wolfssl_ec_diffie_hellman_create: symbol not found" >> build-report.md
        echo "\`\`\`" >> build-report.md
        echo "" >> build-report.md
        echo "## 包内容" >> build-report.md
        echo "\`\`\`" >> build-report.md
        find package -type f >> build-report.md
        echo "\`\`\`" >> build-report.md

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wolfssl-immortalwrt-24.10.1-x86_64-${{ env.WOLFSSL_VERSION }}
        path: |
          wolfssl/wolfssl-${{ env.WOLFSSL_VERSION }}-immortalwrt-24.10.1-x86_64.tar.gz
          wolfssl/build-report.md
          wolfssl/deploy-package/
        retention-days: 30

    - name: Create release assets (if release)
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          wolfssl/wolfssl-${{ env.WOLFSSL_VERSION }}-immortalwrt-24.10.1-x86_64.tar.gz
          wolfssl/build-report.md
        body: |
          ## wolfSSL ${{ env.WOLFSSL_VERSION }} for ImmortalWrt 24.10.1 x64
          
          专为ImmortalWrt 24.10.1 x86_64架构编译的wolfSSL库，解决strongswan插件加载时的符号缺失问题。
          
          ### ✅ 修复内容
          - 修复了 `wolfssl_ec_diffie_hellman_create` 符号缺失问题
          - 使用正确的ImmortalWrt 24.10.1 SDK和工具链
          - 移除了已弃用的配置选项
          - 添加了完整的OpenSSL兼容层支持
          
          ### 🚀 功能特性  
          - 完整的OpenSSL兼容层支持 (opensslextra, opensslall)
          - 支持所有现代加密算法 (ECC, AES-GCM, ChaCha20, Poly1305)
          - TLS 1.3和后量子密码学支持 (Curve25519, Ed25519, SHA-3)
          - 证书生成和管理功能
          - 会话管理和SNI/ALPN支持
          - 针对ImmortalWrt优化的编译选项
          
          ### 📦 安装方法
          ```
          # 下载并解压
          wget wolfssl-${{ env.WOLFSSL_VERSION }}-immortalwrt-24.10.1-x86_64.tar.gz
          tar -xzf wolfssl-*.tar.gz -C /
          
          # 更新库缓存并重启服务
          ldconfig
          /etc/init.d/strongswan restart
          ```
          
          ### 🔧 故障排除
          如果遇到问题，可以：
          1. 检查库文件是否正确安装: `ls -la /usr/lib/libwolfssl*`
          2. 验证符号是否存在: `nm -D /usr/lib/libwolfssl.so | grep wolfssl_ec`
          3. 查看strongswan日志: `logread | grep strongswan`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
